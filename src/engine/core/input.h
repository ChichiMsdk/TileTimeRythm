#ifndef INPUT_H
#define INPUT_H

#include "mydefines.h"
#define DEFINE_KEY(name, code) KEY_##name = code

#ifdef PLATFORM_WINDOWS
typedef enum MouseButtons 
{
	BUTTON_LEFT,
	BUTTON_RIGHT,
	BUTTON_MIDDLE,
	BUTTON_MAX_BUTTONS
}MouseButtons;

typedef enum Keys 
{
	DEFINE_KEY(BACKSPACE, 0x08),
	DEFINE_KEY(ENTER, 0x0D),
	DEFINE_KEY(TAB, 0x09),
	DEFINE_KEY(SHIFT, 0x10),
	DEFINE_KEY(CONTROL, 0x11),

	DEFINE_KEY(PAUSE, 0x13),
	DEFINE_KEY(CAPITAL, 0x14),

	DEFINE_KEY(ESCAPE, 0x1B),

	DEFINE_KEY(CONVERT, 0x1C),
	DEFINE_KEY(NONCONVERT, 0x1D),
	DEFINE_KEY(ACCEPT, 0x1E),
	DEFINE_KEY(MODECHANGE, 0x1F),

	DEFINE_KEY(SPACE, 0x20),
	DEFINE_KEY(PRIOR, 0x21),
	DEFINE_KEY(NEXT, 0x22),
	DEFINE_KEY(END, 0x23),
	DEFINE_KEY(HOME, 0x24),
	DEFINE_KEY(LEFT, 0x25),
	DEFINE_KEY(UP, 0x26),
	DEFINE_KEY(RIGHT, 0x27),
	DEFINE_KEY(DOWN, 0x28),
	DEFINE_KEY(SELECT, 0x29),
	DEFINE_KEY(PRINT, 0x2A),
	DEFINE_KEY(EXECUTE, 0x2B),
	DEFINE_KEY(SNAPSHOT, 0x2C),
	DEFINE_KEY(INSERT, 0x2D),
	DEFINE_KEY(DELETE, 0x2E),
	DEFINE_KEY(HELP, 0x2F),

	DEFINE_KEY(A, 0x41),
	DEFINE_KEY(B, 0x42),
	DEFINE_KEY(C, 0x43),
	DEFINE_KEY(D, 0x44),
	DEFINE_KEY(E, 0x45),
	DEFINE_KEY(F, 0x46),
	DEFINE_KEY(G, 0x47),
	DEFINE_KEY(H, 0x48),
	DEFINE_KEY(I, 0x49),
	DEFINE_KEY(J, 0x4A),
	DEFINE_KEY(K, 0x4B),
	DEFINE_KEY(L, 0x4C),
	DEFINE_KEY(M, 0x4D),
	DEFINE_KEY(N, 0x4E),
	DEFINE_KEY(O, 0x4F),
	DEFINE_KEY(P, 0x50),
	DEFINE_KEY(Q, 0x51),
	DEFINE_KEY(R, 0x52),
	DEFINE_KEY(S, 0x53),
	DEFINE_KEY(T, 0x54),
	DEFINE_KEY(U, 0x55),
	DEFINE_KEY(V, 0x56),
	DEFINE_KEY(W, 0x57),
	DEFINE_KEY(X, 0x58),
	DEFINE_KEY(Y, 0x59),
	DEFINE_KEY(Z, 0x5A),

	DEFINE_KEY(LWIN, 0x5B),
	DEFINE_KEY(RWIN, 0x5C),
	DEFINE_KEY(APPS, 0x5D),

	DEFINE_KEY(SLEEP, 0x5F),

	DEFINE_KEY(NUMPAD0, 0x60),
	DEFINE_KEY(NUMPAD1, 0x61),
	DEFINE_KEY(NUMPAD2, 0x62),
	DEFINE_KEY(NUMPAD3, 0x63),
	DEFINE_KEY(NUMPAD4, 0x64),
	DEFINE_KEY(NUMPAD5, 0x65),
	DEFINE_KEY(NUMPAD6, 0x66),
	DEFINE_KEY(NUMPAD7, 0x67),
	DEFINE_KEY(NUMPAD8, 0x68),
	DEFINE_KEY(NUMPAD9, 0x69),
	DEFINE_KEY(MULTIPLY, 0x6A),
	DEFINE_KEY(ADD, 0x6B),
	DEFINE_KEY(SEPARATOR, 0x6C),
	DEFINE_KEY(SUBTRACT, 0x6D),
	DEFINE_KEY(DECIMAL, 0x6E),
	DEFINE_KEY(DIVIDE, 0x6F),
	DEFINE_KEY(F1, 0x70),
	DEFINE_KEY(F2, 0x71),
	DEFINE_KEY(F3, 0x72),
	DEFINE_KEY(F4, 0x73),
	DEFINE_KEY(F5, 0x74),
	DEFINE_KEY(F6, 0x75),
	DEFINE_KEY(F7, 0x76),
	DEFINE_KEY(F8, 0x77),
	DEFINE_KEY(F9, 0x78),
	DEFINE_KEY(F10, 0x79),
	DEFINE_KEY(F11, 0x7A),
	DEFINE_KEY(F12, 0x7B),
	DEFINE_KEY(F13, 0x7C),
	DEFINE_KEY(F14, 0x7D),
	DEFINE_KEY(F15, 0x7E),
	DEFINE_KEY(F16, 0x7F),
	DEFINE_KEY(F17, 0x80),
	DEFINE_KEY(F18, 0x81),
	DEFINE_KEY(F19, 0x82),
	DEFINE_KEY(F20, 0x83),
	DEFINE_KEY(F21, 0x84),
	DEFINE_KEY(F22, 0x85),
	DEFINE_KEY(F23, 0x86),
	DEFINE_KEY(F24, 0x87),

	DEFINE_KEY(NUMLOCK, 0x90),
	DEFINE_KEY(SCROLL, 0x91),

	DEFINE_KEY(NUMPAD_EQUAL, 0x92),

	DEFINE_KEY(LSHIFT, 0xA0),
	DEFINE_KEY(RSHIFT, 0xA1),
	DEFINE_KEY(LCONTROL, 0xA2),
	DEFINE_KEY(RCONTROL, 0xA3),
	DEFINE_KEY(LMENU, 0xA4),
	DEFINE_KEY(RMENU, 0xA5),

	DEFINE_KEY(SEMICOLON, 0xBA),
	DEFINE_KEY(PLUS, 0xBB),
	DEFINE_KEY(COMMA, 0xBC),
	DEFINE_KEY(MINUS, 0xBD),
	DEFINE_KEY(PERIOD, 0xBE),
	DEFINE_KEY(SLASH, 0xBF),
	DEFINE_KEY(GRAVE, 0xC0),

	KEYS_MAX_KEYS
}Keys;
#endif

#ifdef PLATFORM_LINUX
#ifdef YGLFW3
#include <GLFW/glfw3.h>

typedef enum Buttons 
{
	BUTTON_LEFT = GLFW_MOUSE_BUTTON_LEFT,
	BUTTON_RIGHT = GLFW_MOUSE_BUTTON_RIGHT,
	BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_MIDDLE,
	BUTTON_MAX_BUTTONS
} MouseButtons;

typedef enum Keys 
{
	DEFINE_KEY(SHIFT, GLFW_MOD_SHIFT),
	DEFINE_KEY(CONTROL, GLFW_MOD_CONTROL),
	DEFINE_KEY(BACKSPACE, GLFW_KEY_BACKSPACE),
	DEFINE_KEY(ENTER, GLFW_KEY_ENTER),
	DEFINE_KEY(TAB, GLFW_KEY_TAB),

	DEFINE_KEY(PAUSE, GLFW_KEY_PAUSE),
	// DEFINE_KEY(CAPITAL, GLFW_KEY_CAPITAL),

	DEFINE_KEY(ESCAPE, GLFW_KEY_ESCAPE),

    /*
	 * DEFINE_KEY(CONVERT, GLFW_KEY_CONVERT),
	 * DEFINE_KEY(NONCONVERT, GLFW_KEY_NONCONVERT),
	 * DEFINE_KEY(ACCEPT, GLFW_KEY_ACCEPT),
	 * DEFINE_KEY(MODECHANGE, GLFW_KEY_MODECHANGE),
     */

	DEFINE_KEY(SPACE, GLFW_KEY_SPACE),
    /*
	 * DEFINE_KEY(PRIOR, GLFW_KEY_PRIOR),
	 * DEFINE_KEY(NEXT, GLFW_KEY_NEXT),
     */
	DEFINE_KEY(END, GLFW_KEY_END),
	DEFINE_KEY(HOME, GLFW_KEY_HOME),
	DEFINE_KEY(LEFT, GLFW_KEY_LEFT),
	DEFINE_KEY(UP, GLFW_KEY_UP),
	DEFINE_KEY(RIGHT, GLFW_KEY_RIGHT),
	DEFINE_KEY(DOWN, GLFW_KEY_DOWN),
	// DEFINE_KEY(SELECT, GLFW_KEY_SELECT),
	DEFINE_KEY(PRINT, GLFW_KEY_PRINT_SCREEN),
    /*
	 * DEFINE_KEY(EXECUTE, GLFW_KEY_EXECUTE),
	 * DEFINE_KEY(SNAPSHOT, GLFW_KEY_SNAPSHOT),
     */
	DEFINE_KEY(INSERT, GLFW_KEY_INSERT),
	DEFINE_KEY(DELETE, GLFW_KEY_DELETE),
	// DEFINE_KEY(HELP, GLFW_KEY_HELP),

	DEFINE_KEY(A, GLFW_KEY_A),
	DEFINE_KEY(B, GLFW_KEY_B),
	DEFINE_KEY(C, GLFW_KEY_C),
	DEFINE_KEY(D, GLFW_KEY_D),
	DEFINE_KEY(E, GLFW_KEY_E),
	DEFINE_KEY(F, GLFW_KEY_F),
	DEFINE_KEY(G, GLFW_KEY_G),
	DEFINE_KEY(H, GLFW_KEY_H),
	DEFINE_KEY(I, GLFW_KEY_I),
	DEFINE_KEY(J, GLFW_KEY_J),
	DEFINE_KEY(K, GLFW_KEY_K),
	DEFINE_KEY(L, GLFW_KEY_L),
	DEFINE_KEY(M, GLFW_KEY_M),
	DEFINE_KEY(N, GLFW_KEY_N),
	DEFINE_KEY(O, GLFW_KEY_O),
	DEFINE_KEY(P, GLFW_KEY_P),
	DEFINE_KEY(Q, GLFW_KEY_Q),
	DEFINE_KEY(R, GLFW_KEY_R),
	DEFINE_KEY(S, GLFW_KEY_S),
	DEFINE_KEY(T, GLFW_KEY_T),
	DEFINE_KEY(U, GLFW_KEY_U),
	DEFINE_KEY(V, GLFW_KEY_V),
	DEFINE_KEY(W, GLFW_KEY_W),
	DEFINE_KEY(X, GLFW_KEY_X),
	DEFINE_KEY(Y, GLFW_KEY_Y),
	DEFINE_KEY(Z, GLFW_KEY_Z),

	DEFINE_KEY(LWIN, GLFW_KEY_LEFT_SUPER),
	DEFINE_KEY(RWIN, GLFW_KEY_RIGHT_SUPER),
	// DEFINE_KEY(APPS, 0x5D),

	// DEFINE_KEY(SLEEP, 0x5F),

	DEFINE_KEY(NUMPAD0, GLFW_KEY_KP_0),
	DEFINE_KEY(NUMPAD1, GLFW_KEY_KP_1),
	DEFINE_KEY(NUMPAD2, GLFW_KEY_KP_2),
	DEFINE_KEY(NUMPAD3, GLFW_KEY_KP_3),
	DEFINE_KEY(NUMPAD4, GLFW_KEY_KP_4),
	DEFINE_KEY(NUMPAD5, GLFW_KEY_KP_5),
	DEFINE_KEY(NUMPAD6, GLFW_KEY_KP_6),
	DEFINE_KEY(NUMPAD7, GLFW_KEY_KP_7),
	DEFINE_KEY(NUMPAD8, GLFW_KEY_KP_8),
	DEFINE_KEY(NUMPAD9, GLFW_KEY_KP_9),
	DEFINE_KEY(MULTIPLY, GLFW_KEY_KP_MULTIPLY),
	DEFINE_KEY(ADD, GLFW_KEY_KP_ADD),
	// DEFINE_KEY(SEPARATOR, GLFW_KEY_KP_SEPARATOR),
	DEFINE_KEY(SUBTRACT, GLFW_KEY_KP_SUBTRACT),
	DEFINE_KEY(DECIMAL, GLFW_KEY_KP_DECIMAL),
	DEFINE_KEY(DIVIDE, GLFW_KEY_KP_DIVIDE),
	DEFINE_KEY(F1, GLFW_KEY_F1),
	DEFINE_KEY(F2, GLFW_KEY_F2),
	DEFINE_KEY(F3, GLFW_KEY_F3),
	DEFINE_KEY(F4, GLFW_KEY_F4),
	DEFINE_KEY(F5, GLFW_KEY_F5),
	DEFINE_KEY(F6, GLFW_KEY_F6),
	DEFINE_KEY(F7, GLFW_KEY_F7),
	DEFINE_KEY(F8, GLFW_KEY_F8),
	DEFINE_KEY(F9, GLFW_KEY_F9),
	DEFINE_KEY(F10, GLFW_KEY_F10),
	DEFINE_KEY(F11, GLFW_KEY_F11),
	DEFINE_KEY(F12, GLFW_KEY_F12),
	DEFINE_KEY(F13, GLFW_KEY_F13),
	DEFINE_KEY(F14, GLFW_KEY_F14),
	DEFINE_KEY(F15, GLFW_KEY_F15),
	DEFINE_KEY(F16, GLFW_KEY_F16),
	DEFINE_KEY(F17, GLFW_KEY_F17),
	DEFINE_KEY(F18, GLFW_KEY_F18),
	DEFINE_KEY(F19, GLFW_KEY_F19),
	DEFINE_KEY(F20, GLFW_KEY_F20),
	DEFINE_KEY(F21, GLFW_KEY_F21),
	DEFINE_KEY(F22, GLFW_KEY_F22),
	DEFINE_KEY(F23, GLFW_KEY_F23),
	DEFINE_KEY(F24, GLFW_KEY_F24),

	DEFINE_KEY(NUMLOCK, GLFW_KEY_NUM_LOCK),
	DEFINE_KEY(SCROLL, GLFW_KEY_SCROLL_LOCK),

	DEFINE_KEY(NUMPAD_EQUAL, GLFW_KEY_KP_EQUAL),

	DEFINE_KEY(LSHIFT, GLFW_KEY_LEFT_SHIFT),
	DEFINE_KEY(RSHIFT, GLFW_KEY_RIGHT_SHIFT),
	DEFINE_KEY(LCONTROL, GLFW_KEY_LEFT_CONTROL),
	DEFINE_KEY(RCONTROL, GLFW_KEY_RIGHT_CONTROL),
	DEFINE_KEY(LMENU, GLFW_KEY_MENU),
	DEFINE_KEY(RMENU, GLFW_KEY_MENU),

	DEFINE_KEY(SEMICOLON, GLFW_KEY_SEMICOLON),
	DEFINE_KEY(PLUS, GLFW_KEY_KP_ADD),
	DEFINE_KEY(COMMA, GLFW_KEY_COMMA),
	DEFINE_KEY(MINUS, GLFW_KEY_MINUS),
	DEFINE_KEY(PERIOD, GLFW_KEY_PERIOD),
	DEFINE_KEY(SLASH, GLFW_KEY_SLASH),
	DEFINE_KEY(GRAVE, GLFW_KEY_GRAVE_ACCENT),
} Keys;

#endif // YGLFW3
#endif // PLATFORM_WINDOWS

void InputInitialize(void);

void InputShutdown(void);

void InputUpdate(
		f64									deltaTime);

/* Keyboard input */
YND b8 InputIsKeyDown(
		Keys								key);

YND b8 InputIsKeyUp(
		Keys								key);

YND b8 InputWasKeyDown(
		Keys								key);

YND b8 InputWasKeyUp(
		Keys								key);

void InputProcessKey(
		Keys								key,
		b8									bPressed);

/* Mouse input */
YND b8 InputIsMouseButtonDown(
		MouseButtons						button);

YND b8 InputIsMouseButtonUp(
		MouseButtons						button);

YND b8 InputWasMouseButtonDown(
		MouseButtons						button);

YND b8 InputWasMouseButtonUp(
		MouseButtons						button);

void InputGetMousePosition(
		int32_t*							pX,
		int32_t*							pY);

void InputGetPreviousMousePosition(
		int32_t*							pX,
		int32_t*							pY);

void InputProcessMouseButton(
		MouseButtons						button,
		b8									bPressed);

void InputProcessMouseMove(
		int16_t								x,
		int16_t								y);

void InputProcessMouseWheel(
		int8_t								zDelta);

#endif // INPUT_H
